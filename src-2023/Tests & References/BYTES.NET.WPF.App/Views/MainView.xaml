<Window x:Class="BYTES.NET.WPF.App.Views.MainView"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:localVMs="clr-namespace:BYTES.NET.WPF.App.ViewModels"
        xmlns:converters="clr-namespace:BYTES.NET.WPF.Converters;assembly=BYTES.NET.WPF"
        xmlns:s="clr-namespace:System;assembly=mscorlib"
        mc:Ignorable="d"
        Title="{Binding Title, Mode=OneWay}" Height="450" Width="800">
    <Window.DataContext>
        <localVMs:MainVM/>
    </Window.DataContext>

    <!-- add ressources (like converters etc.) -->
    <Window.Resources>
        <converters:BooleanToIndexConverter x:Key="BoolToIndexConverter" />
        <converters:BoolInvertConverter x:Key="BoolInvertConverter"/>
        <converters:BoolToVisibilityConverter x:Key="BoolToVisibilityConverter"/>
        <converters:NothingToVisibilityConverter x:Key="NothingToVisibilityConverter"/>
        <converters:NothingToBoolConverter x:Key="NothingToBoolConverter"/>
        <converters:CountToVisibilityConverter x:Key="CountToVisibilityConverter"/>

        <!-- see 'https://stackoverflow.com/questions/4997446/boolean-commandparameter-in-xaml' for details on using booleans in XAML-->
        <s:Boolean x:Key="True">True</s:Boolean>
        <s:Boolean x:Key="False">False</s:Boolean>
    </Window.Resources>

    <Grid>
        <TabControl HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
            <TabItem Header="Basic MVVM">
                <Grid Margin="5">
                    <StackPanel>

                        <!-- a basic binding and relay commands example -->
                        <DockPanel LastChildFill="True">
                            <TextBlock Text="Window Title:" FontWeight="Bold" DockPanel.Dock="Left" Margin="0,0,5,0" />
                            <Button Content="Prompt Text" Command="{Binding Path=Commands[PromptTextCmd]}" CommandParameter="{Binding Path=Text, ElementName=TitleText}" DockPanel.Dock="Right" Margin="5,0,0,0" />
                            <TextBox Text="{Binding Path=Title, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" x:Name="TitleText" />
                        </DockPanel>

                        <!-- a child view model/ view example-->
                        <ItemsControl Margin="0,10,0,0" ItemsSource="{Binding Animals}">
                            <ItemsControl.ItemTemplate>
                                <DataTemplate>
                                    <UserControl Content="{Binding Path=View}" />
                                </DataTemplate>
                            </ItemsControl.ItemTemplate>
                        </ItemsControl>

                    </StackPanel>
                </Grid>
            </TabItem>
            <TabItem Header="Validation">
                <Grid Margin="5">
                    <StackPanel>

                        <!-- an in-line validation example (displaying an error message) -->
                        <DockPanel LastChildFill="True">
                            <TextBlock Text="The answer to life, the universe and everything is..." FontWeight="Bold" />
                            <TextBox Text="{Binding ValidationAnswer, UpdateSourceTrigger=PropertyChanged, ValidatesOnNotifyDataErrors=True}" Margin="0,5,0,20">

                                <Validation.ErrorTemplate>
                                    <ControlTemplate>
                                        <StackPanel>

                                            <!-- placeholder for the TextBox itself -->
                                            <AdornedElementPlaceholder x:Name="textBox"/>

                                            <!-- add the error messages -->
                                            <ItemsControl ItemsSource="{Binding}">
                                                <ItemsControl.ItemTemplate>
                                                    <DataTemplate>
                                                        <TextBlock Text="{Binding Path=ErrorContent.Message}">
                                                            <TextBlock.Style>
                                                                <Style TargetType="{x:Type TextBlock}">
                                                                    <Setter Property="Foreground"
 Value="Orange" />

                                                                </Style>
                                                            </TextBlock.Style>
                                                        </TextBlock>
                                                    </DataTemplate>
                                                </ItemsControl.ItemTemplate>
                                            </ItemsControl>

                                        </StackPanel>
                                    </ControlTemplate>
                                </Validation.ErrorTemplate>

                            </TextBox>
                        </DockPanel>

                    </StackPanel>
                </Grid>
            </TabItem>
            <TabItem Header="Converters">
                <StackPanel>
                    <!-- the 'BoolInvertConverter' example-->
                    <TextBlock Text="BoolInvertConveter" FontWeight="Bold"/>
                    <DockPanel LastChildFill="True">
                        <TextBlock Text="Check/ Uncheck" />
                        <CheckBox x:Name="InvertCheckbox" Margin="5,0,5,0" />
                        <TextBlock Text="to see how the value is inverted to " />
                        <TextBlock Text="{Binding ElementName=InvertCheckbox, Path=IsChecked, Converter={StaticResource BoolInvertConverter}}" FontWeight="Bold" />
                    </DockPanel>

                    <!-- the 'BoolToIndexConverter' example-->
                    <TextBlock Text="BoolToIndexConverter" FontWeight="Bold" Margin="0,10,0,0"/>
                    <DockPanel LastChildFill="True">
                        <TextBlock Text="Check/ Uncheck" />
                        <CheckBox x:Name="IndexCheckbox" Margin="5,0,5,0" />
                        <TextBlock Text="to see how the selection is changed to " />
                        <ComboBox SelectedIndex="{Binding ElementName=IndexCheckbox, Path=IsChecked, Converter={StaticResource BoolToIndexConverter}}" Margin="0,0,5,0">
                            <ComboBox.Items>
                                <ComboBoxItem Content="True" />
                                <ComboBoxItem Content="False" />
                            </ComboBox.Items>
                        </ComboBox>
                    </DockPanel>

                    <!-- the 'BoolToVisibilityConverter' example-->
                    <TextBlock Text="BoolToVisibilityConverter" FontWeight="Bold" Margin="0,10,0,0"/>
                    <DockPanel LastChildFill="True">
                        <TextBlock Text="If" />
                        <CheckBox x:Name="VisCheckbox" Margin="5,0,5,0" />
                        <TextBlock Text="is unchecked, this text is prompted" Visibility="{Binding ElementName=VisCheckbox, Path=IsChecked, Converter={StaticResource BoolToVisibilityConverter},ConverterParameter={StaticResource False}}" FontWeight="Bold" />
                        <TextBlock Text="is checked, another text is prompted" Visibility="{Binding ElementName=VisCheckbox, Path=IsChecked, Converter={StaticResource BoolToVisibilityConverter}}" FontWeight="Bold" />
                    </DockPanel>

                    <!-- the 'NothingToVisibilityConverter' example-->
                    <TextBlock Text="NothingToVisibilityConverter" FontWeight="Bold" Margin="0,10,0,0"/>
                    <DockPanel LastChildFill="True">
                        <TextBlock Text="If" />
                        <TextBox x:Name="VisTextbox" Margin="5,0,5,0" Width="50" />
                        <TextBlock Text="is empty/ nothing, this text is prompted" Visibility="{Binding ElementName=VisTextbox, Path=Text, Converter={StaticResource NothingToVisibilityConverter}}" FontWeight="Bold" />
                        <TextBlock Text="is not empty, another text is prompted" Visibility="{Binding ElementName=VisTextbox, Path=Text, Converter={StaticResource NothingToVisibilityConverter},ConverterParameter={StaticResource False}}" FontWeight="Bold" />
                    </DockPanel>

                    <!-- the 'NothingToBoolConverter' example-->
                    <TextBlock Text="NothingToBoolConverter" FontWeight="Bold" Margin="0,10,0,0"/>
                    <DockPanel LastChildFill="True">
                        <TextBlock Text="Enter some text to show" />
                        <TextBox x:Name="BoolTextbox" Margin="5,0,5,0" Width="50" />
                        <TextBlock Text="to see how the output changes to " />
                        <TextBlock Text="{Binding ElementName=BoolTextbox, Path=Text, Converter={StaticResource NothingToBoolConverter}}" FontWeight="Bold" />
                    </DockPanel>

                    <!-- the 'CountToVisibilityConverter' example-->
                    <TextBlock Text="CountToVisibilityConverter" FontWeight="Bold" Margin="0,10,0,0"/>
                    <DockPanel LastChildFill="True">
                        <TextBlock Text="If us enter more than one item (separated by ,) to" />
                        <TextBox Text="{Binding SampleInputString, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" Margin="5,0,5,0" Width="50" />
                        <TextBlock Text="the message changes to " />
                        <TextBlock Text="One" Visibility="{Binding SampleStringList, Mode=OneWay, Converter={StaticResource CountToVisibilityConverter}}" FontWeight="Bold" />
                        <TextBlock Text=" + One more" Visibility="{Binding SampleStringList,Mode=OneWay, Converter={StaticResource CountToVisibilityConverter},ConverterParameter=2}" FontWeight="Bold" />
                        <TextBlock Text=" + One more" Visibility="{Binding SampleStringList,Mode=OneWay, Converter={StaticResource CountToVisibilityConverter},ConverterParameter=3}" FontWeight="Bold" />
                        <TextBlock Text=" for " />
                        <TextBlock Text="{Binding SampleStringListCount}" />
                        <TextBlock Text=" items found" />
                    </DockPanel>

                </StackPanel>
            </TabItem>
            <TabItem Header="Dialog">
                <Grid Margin="5">
                    <StackPanel HorizontalAlignment="Stretch" VerticalAlignment="Stretch">

                        <!-- the control for selecting the blocking mode -->
                        <DockPanel LastChildFill="False">
                            <TextBlock Text="Blocking Dialog: "></TextBlock>
                            <ComboBox SelectedIndex="{Binding ShowDialogBlocking, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay, Converter={StaticResource BoolToIndexConverter}}" Margin="0,0,5,0">
                                <ComboBox.Items>
                                    <ComboBoxItem Content="True" />
                                    <ComboBoxItem Content="False" />
                                </ComboBox.Items>
                            </ComboBox>
                            <TextBlock Text="{Binding BlockingDialog}" />
                        </DockPanel>

                        <Separator HorizontalAlignment="Stretch" Margin="0,5,0,5" />

                        <!-- the control for updating the message-->
                        <DockPanel LastChildFill="True">
                            <TextBlock Text="Message: " />
                            <TextBlock Text="{Binding DialogMessage}" Margin="5,0,0,0" />
                        </DockPanel>
                        <DockPanel LastChildFill="True">
                            <TextBlock Text="Update the message: " />
                            <TextBox Name="OutputText" Text="{Binding DialogMessage, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" Margin="5,0,0,0" />
                        </DockPanel>

                        <Separator HorizontalAlignment="Stretch" Margin="0,5,0,5" />

                        <!-- the control for opening the dialog -->
                        <Button Content="Show the Dialog for Updating the Message" Command="{Binding Path=Commands[ShowDialogCmd]}"/>

                    </StackPanel>
                </Grid>
            </TabItem>
            <TabItem Header="String Matching">
                <Grid Margin="5">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="32*"/>
                        <ColumnDefinition/>
                        <ColumnDefinition Width="79*"/>
                    </Grid.ColumnDefinitions>
                    <ContentPresenter Content="{Binding StringMatching.View}" Grid.ColumnSpan="3" />
                </Grid>
            </TabItem>

            <TabItem Header="Logging">
                <StackPanel>
                    <TextBlock Text="Log Message:" />
                    <TextBox x:Name="LogText" Text="{Binding LogText, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                    <TextBlock Text="Information Level"/>
                    <ComboBox ItemsSource="{Binding InformationLevels}" SelectedItem="{Binding SelectedInformationLevel, Mode=TwoWay}" />
                    <Button Content="Log Entry" Command="{Binding Commands[LogCmd]}"/>

                    <!-- Scrollable Log Entries Display -->
                    <ScrollViewer VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Disabled" Height="311">
                        <ItemsControl ItemsSource="{Binding LogEntries}">
                            <ItemsControl.ItemTemplate>
                                <DataTemplate>
                                    <StackPanel Margin="5">

                                        <!-- Display Timestamp -->
                                        <TextBlock Text="{Binding TimeStamp, StringFormat='{}{0:MM/dd/yyyy HH:mm:ss}'}" FontWeight="Bold"/>

                                        <!-- Display Information Level with Label -->
                                        <DockPanel>
                                            <TextBlock Text="Information Level: " FontWeight="Bold" />
                                            <TextBlock Text="{Binding Level}" FontStyle="Italic"/>
                                        </DockPanel>

                                        <!-- Display Message with Label -->
                                        <DockPanel>
                                            <TextBlock Text="Message: " FontWeight="Bold" />
                                            <TextBlock Text="{Binding Message}" />
                                        </DockPanel>

                                    </StackPanel>
                                </DataTemplate>
                            </ItemsControl.ItemTemplate>
                        </ItemsControl>
                    </ScrollViewer>
                </StackPanel>
            </TabItem>
        </TabControl>
    </Grid>

</Window>
